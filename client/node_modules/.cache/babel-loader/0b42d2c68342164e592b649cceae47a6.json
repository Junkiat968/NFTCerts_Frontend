{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaspz\\\\Documents\\\\GitHub\\\\ITP\\\\Blockchain-Trusted-Model\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { colorContractAddress, colorContractABI, simpleContractAddress, simpleContractABI } from '../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [loginState, setLoginState] = useState(false);\n  const init = useCallback( // async artifact => {\n  //   if (artifact) {\n  //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n  //     const accounts = await web3.eth.requestAccounts();\n  //     setCurrentAccount(accounts);\n  //     const networkID = await web3.eth.net.getId();\n  //     const { abi } = artifact;\n  //     let address, contract;\n  //     try {\n  //       address = artifact.networks[networkID].address;\n  //       contract = new web3.eth.Contract(abi, address);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //     dispatch({\n  //       type: actions.init,\n  //       data: { artifact, web3, accounts, networkID, contract }\n  //     });\n  //   }\n  // }\n  async () => {\n    // const artifact = require(\"../../contracts/SimpleStorage.json\");\n    const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n    const accounts = await web3.eth.requestAccounts();\n    setCurrentAccount(accounts);\n    const networkID = await web3.eth.net.getId();\n\n    if (accounts) {\n      // const { abi } = artifact;\n      let addressSS, contractSS, addressC, contractC;\n\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n      }\n\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract\n        }\n      });\n    }\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const accountConnected = state.accounts;\n\n      if (accountConnected) {\n        setLoginState(true);\n      } else {// console.log(\"No accounts found.\");\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        // const artifactSS = require(\"../../contracts/SimpleStorage.json\");\n        // init(artifactSS);\n        init();\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const events = [\"chainChanged\", \"accountsChanged\"];\n\n    const handleChange = () => {\n      init(state.artifact);\n      window.location.reload();\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      init,\n      currentAccount,\n      loginState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthProvider, \"u+KcVOwzOPO1VIkKyqJ5qIyppzA=\");\n\n_c = EthProvider;\nexport default EthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","colorContractAddress","colorContractABI","simpleContractAddress","simpleContractABI","EthProvider","children","state","dispatch","currentAccount","setCurrentAccount","loginState","setLoginState","init","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","addressSS","contractSS","addressC","contractC","address","artifact","networks","contract","Contract","abi","err","console","error","type","data","checkIfWalletIsConnected","accountConnected","log","Error","tryInit","events","handleChange","window","location","reload","forEach","e","ethereum","on","removeListener"],"sources":["C:/Users/jaspz/Documents/GitHub/ITP/Blockchain-Trusted-Model/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport EthContext from \"./EthContext\";\r\nimport { reducer, actions, initialState } from \"./state\";\r\n\r\nimport {\r\n  colorContractAddress,\r\n  colorContractABI,\r\n  simpleContractAddress,\r\n  simpleContractABI\r\n} from '../../utils/constants';\r\n\r\nfunction EthProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [currentAccount, setCurrentAccount] = useState('');\r\n  const [loginState, setLoginState] = useState(false);\r\n\r\n  const init = useCallback(\r\n    // async artifact => {\r\n    //   if (artifact) {\r\n    //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n    //     const accounts = await web3.eth.requestAccounts();\r\n    //     setCurrentAccount(accounts);\r\n    //     const networkID = await web3.eth.net.getId();\r\n    //     const { abi } = artifact;\r\n    //     let address, contract;\r\n    //     try {\r\n    //       address = artifact.networks[networkID].address;\r\n    //       contract = new web3.eth.Contract(abi, address);\r\n    //     } catch (err) {\r\n    //       console.error(err);\r\n    //     }\r\n    //     dispatch({\r\n    //       type: actions.init,\r\n    //       data: { artifact, web3, accounts, networkID, contract }\r\n    //     });\r\n    //   }\r\n    // }\r\n    async () => {\r\n      // const artifact = require(\"../../contracts/SimpleStorage.json\");\r\n\r\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n      const accounts = await web3.eth.requestAccounts();\r\n      setCurrentAccount(accounts);\r\n      const networkID = await web3.eth.net.getId();\r\n\r\n      if (accounts) {\r\n        // const { abi } = artifact;\r\n        let addressSS, contractSS, addressC, contractC;\r\n        try {\r\n          address = artifact.networks[networkID].address;\r\n          contract = new web3.eth.Contract(abi, address);\r\n\r\n\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n        dispatch({\r\n          type: actions.init,\r\n          data: { artifact, web3, accounts, networkID, contract }\r\n        });\r\n      }\r\n    }\r\n    , []);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const accountConnected = state.accounts;\r\n\r\n      if (accountConnected) {\r\n        setLoginState(true);\r\n      } else {\r\n        // console.log(\"No accounts found.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(\"No ethereum object\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const tryInit = async () => {\r\n      try {\r\n        // const artifactSS = require(\"../../contracts/SimpleStorage.json\");\r\n        // init(artifactSS);\r\n        init();\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    tryInit();\r\n  }, [init]);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    const events = [\"chainChanged\", \"accountsChanged\"];\r\n    const handleChange = () => {\r\n      init(state.artifact);\r\n      window.location.reload();\r\n    };\r\n\r\n    events.forEach(e => window.ethereum.on(e, handleChange));\r\n    return () => {\r\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\r\n    };\r\n  }, [init, state.artifact]);\r\n\r\n  return (\r\n    <EthContext.Provider value={{\r\n      state,\r\n      dispatch,\r\n      init,\r\n      currentAccount,\r\n      loginState\r\n    }}>\r\n      {children}\r\n    </EthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default EthProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}