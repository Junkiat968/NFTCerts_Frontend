{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaspz\\\\Documents\\\\GitHub\\\\ITP\\\\Blockchain-Trusted-Model\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { ethers } from 'ethers';\nimport { base64ContractAddress, base64ContractABI, sitnftContractAddress, sitnftContractABI, simpleContractAddress, simpleContractABI } from '../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  ethereum\n} = window;\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\n/** Get SITNFT Contract Instance*/\n\nconst getSITNFTContract = () => {\n  const sitnftContract = new ethers.Contract(sitnftContractAddress, sitnftContractABI, signer);\n  console.log(provider, signer, sitnftContract);\n  return sitnftContract;\n};\n\nfunction EthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [loginState, setLoginState] = useState(false);\n  const init = useCallback( // async artifact => {\n  //   if (artifact) {\n  //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n  //     const accounts = await web3.eth.requestAccounts();\n  //     setCurrentAccount(accounts);\n  //     const networkID = await web3.eth.net.getId();\n  //     const { abi } = artifact;\n  //     let address, contract;\n  //     try {\n  //       address = artifact.networks[networkID].address;\n  //       contract = new web3.eth.Contract(abi, address);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //     dispatch({\n  //       type: actions.init,\n  //       data: { artifact, web3, accounts, networkID, contract }\n  //     });\n  //   }\n  // }\n  async artifact => {\n    if (artifact) {\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n      const accounts = await web3.eth.requestAccounts();\n      setCurrentAccount(accounts);\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contractSS, contractC, contractBase64, contractsitnft;\n\n      try {\n        address = artifact.networks[networkID].address;\n        contractSS = new web3.eth.Contract(abi, address); // contractC = new web3.eth.Contract(colorContractABI, colorContractAddress);\n\n        contractBase64 = new web3.eth.Contract(base64ContractABI, base64ContractAddress);\n        contractsitnft = new web3.eth.Contract(sitnftContractABI, sitnftContractAddress);\n      } catch (err) {\n        console.error(err);\n      } // DISPATCH\n\n\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contractSS,\n          contractC,\n          contractBase64,\n          contractsitnft\n        }\n      });\n    }\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const accountConnected = state.accounts;\n\n      if (accountConnected) {\n        setLoginState(true);\n      } else {// console.log(\"No accounts found.\");\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        // const artifactSS = require(\"../../contracts/SimpleStorage.json\");\n        const artifact = require(\"../../contracts/SITNFT.json\");\n\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]); // ======================================== SITNFT Functions ========================================\n\n  const [formData, setFormData] = useState({\n    studentId: \"\",\n    studentAdd: \"\"\n  });\n\n  const handleForm = (e, name) => {\n    // setStudentData({ ...student, [name]: e.target.value });\n    setFormData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    }));\n  };\n\n  const testFunct = async () => {\n    const sitnftInstance = getSITNFTContract(); // const supply = await sitnftInstance.totalSupply();\n\n    console.log(state.accounts.toString());\n    const result1 = await sitnftInstance.isAdmin(\"0xf9977c8E797b3bD6115e0aF05da1aDAD1953B943\");\n    const result2 = await sitnftInstance.isAdmin(state.accounts.toString()); // console.log(supply.toNumber());\n\n    console.log(result1);\n    console.log(result2);\n  };\n\n  const makeAdmin = async () => {\n    const sitnftInstance = getSITNFTContract();\n    const result = await sitnftInstance.addAdmin(state.accounts.toString());\n    console.log(result);\n  };\n\n  const removeAdmin = async () => {\n    const sitnftInstance = getSITNFTContract();\n\n    try {\n      const result = await sitnftInstance.removeAdmin(\"0xf9977c8E797b3bD6115e0aF05da1aDAD1953B943\");\n      console.log(result);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // ======================================== END SITNFT Functions ========================================\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const events = [\"chainChanged\", \"accountsChanged\"];\n\n    const handleChange = () => {\n      // init(state.artifact);\n      window.location.reload();\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      init,\n      currentAccount,\n      loginState,\n      testFunct,\n      makeAdmin,\n      removeAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthProvider, \"kcVYVxq6ww5aUXXpAbyILdHu8A0=\");\n\n_c = EthProvider;\nexport default EthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","ethers","base64ContractAddress","base64ContractABI","sitnftContractAddress","sitnftContractABI","simpleContractAddress","simpleContractABI","ethereum","window","provider","providers","Web3Provider","signer","getSigner","getSITNFTContract","sitnftContract","Contract","console","log","EthProvider","children","state","dispatch","currentAccount","setCurrentAccount","loginState","setLoginState","init","artifact","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","abi","address","contractSS","contractC","contractBase64","contractsitnft","networks","err","error","type","data","checkIfWalletIsConnected","accountConnected","Error","tryInit","require","formData","setFormData","studentId","studentAdd","handleForm","e","name","prevState","target","value","testFunct","sitnftInstance","toString","result1","isAdmin","result2","makeAdmin","result","addAdmin","removeAdmin","events","handleChange","location","reload","forEach","on","removeListener"],"sources":["C:/Users/jaspz/Documents/GitHub/ITP/Blockchain-Trusted-Model/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport EthContext from \"./EthContext\";\r\nimport { reducer, actions, initialState } from \"./state\";\r\nimport { ethers } from 'ethers';\r\n\r\nimport {\r\n  base64ContractAddress,\r\n  base64ContractABI,\r\n  sitnftContractAddress,\r\n  sitnftContractABI,\r\n  simpleContractAddress,\r\n  simpleContractABI\r\n} from '../../utils/constants';\r\nconst { ethereum } = window;\r\n\r\nconst provider = new ethers.providers.Web3Provider(ethereum);\r\nconst signer = provider.getSigner();\r\n\r\n/** Get SITNFT Contract Instance*/\r\nconst getSITNFTContract = () => {\r\n  const sitnftContract = new ethers.Contract(sitnftContractAddress, sitnftContractABI, signer);\r\n  console.log(provider, signer, sitnftContract);\r\n  return sitnftContract;\r\n}\r\n\r\nfunction EthProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [currentAccount, setCurrentAccount] = useState('');\r\n  const [loginState, setLoginState] = useState(false);\r\n\r\n  const init = useCallback(\r\n    // async artifact => {\r\n    //   if (artifact) {\r\n    //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n    //     const accounts = await web3.eth.requestAccounts();\r\n    //     setCurrentAccount(accounts);\r\n    //     const networkID = await web3.eth.net.getId();\r\n\r\n\r\n    //     const { abi } = artifact;\r\n    //     let address, contract;\r\n    //     try {\r\n    //       address = artifact.networks[networkID].address;\r\n    //       contract = new web3.eth.Contract(abi, address);\r\n    //     } catch (err) {\r\n    //       console.error(err);\r\n    //     }\r\n    //     dispatch({\r\n    //       type: actions.init,\r\n    //       data: { artifact, web3, accounts, networkID, contract }\r\n    //     });\r\n    //   }\r\n    // }\r\n    async artifact => {\r\n      if (artifact) {\r\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n        const accounts = await web3.eth.requestAccounts();\r\n        setCurrentAccount(accounts);\r\n        const networkID = await web3.eth.net.getId();\r\n\r\n        const { abi } = artifact;\r\n        let address, contractSS, contractC, contractBase64, contractsitnft;\r\n        try {\r\n          address = artifact.networks[networkID].address;\r\n          contractSS = new web3.eth.Contract(abi, address);\r\n          // contractC = new web3.eth.Contract(colorContractABI, colorContractAddress);\r\n          contractBase64 = new web3.eth.Contract(base64ContractABI, base64ContractAddress);\r\n          contractsitnft = new web3.eth.Contract(sitnftContractABI, sitnftContractAddress);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n\r\n        // DISPATCH\r\n        dispatch({\r\n          type: actions.init,\r\n          data: { artifact, web3, accounts, networkID, contractSS, contractC, contractBase64, contractsitnft }\r\n        });\r\n      }\r\n    }\r\n    , []);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const accountConnected = state.accounts;\r\n      if (accountConnected) {\r\n        setLoginState(true);\r\n      } else {\r\n        // console.log(\"No accounts found.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(\"No ethereum object\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const tryInit = async () => {\r\n      try {\r\n        // const artifactSS = require(\"../../contracts/SimpleStorage.json\");\r\n        const artifact = require(\"../../contracts/SITNFT.json\");\r\n        init(artifact);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    tryInit();\r\n  }, [init]);\r\n\r\n  // ======================================== SITNFT Functions ========================================\r\n  const [formData, setFormData] = useState({ studentId: \"\", studentAdd: \"\" });\r\n  const handleForm = (e, name) => {\r\n    // setStudentData({ ...student, [name]: e.target.value });\r\n    setFormData((prevState) => ({ ...prevState, [name]: e.target.value }));\r\n  };\r\n\r\n  const testFunct = async () => {\r\n    const sitnftInstance = getSITNFTContract();\r\n\r\n    // const supply = await sitnftInstance.totalSupply();\r\n    console.log((state.accounts).toString());\r\n    const result1 = await sitnftInstance.isAdmin(\"0xf9977c8E797b3bD6115e0aF05da1aDAD1953B943\");\r\n    const result2 = await sitnftInstance.isAdmin((state.accounts).toString());\r\n    // console.log(supply.toNumber());\r\n    console.log(result1);\r\n    console.log(result2);\r\n  }\r\n\r\n  const makeAdmin = async () => {\r\n    const sitnftInstance = getSITNFTContract();\r\n    const result = await sitnftInstance.addAdmin((state.accounts).toString());\r\n    console.log(result);\r\n  }\r\n  const removeAdmin = async () => {\r\n    const sitnftInstance = getSITNFTContract();\r\n    try {\r\n      const result = await sitnftInstance.removeAdmin(\"0xf9977c8E797b3bD6115e0aF05da1aDAD1953B943\");\r\n      console.log(result);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  // ======================================== END SITNFT Functions ========================================\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    const events = [\"chainChanged\", \"accountsChanged\"];\r\n    const handleChange = () => {\r\n      // init(state.artifact);\r\n      window.location.reload();\r\n    };\r\n\r\n    events.forEach(e => window.ethereum.on(e, handleChange));\r\n    return () => {\r\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\r\n    };\r\n  },\r\n    [init, state.artifact]);\r\n\r\n  return (\r\n    <EthContext.Provider value={{\r\n      state,\r\n      dispatch,\r\n      init,\r\n      currentAccount,\r\n      loginState,\r\n      testFunct,\r\n      makeAdmin,\r\n      removeAdmin\r\n    }}>\r\n      {children}\r\n    </EthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default EthProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}