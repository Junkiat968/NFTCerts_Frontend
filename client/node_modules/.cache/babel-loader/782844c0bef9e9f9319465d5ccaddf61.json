{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaspz\\\\Documents\\\\GitHub\\\\ITP\\\\Blockchain-Trusted-Model\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { ethers } from 'ethers';\nimport { base64ContractAddress, base64ContractABI, sitnftContractAddress, sitnftContractABI, simpleContractAddress, simpleContractABI } from '../../utils/constants';\n/** Get SITNFT Contract Instance*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSITNFTContract = () => {\n  const sitnftContract = new ethers.Contract(sitnftContractAddress, sitnftContractABI, signer);\n  console.log(provider, signer, sitnftContract);\n  return sitnftContract;\n};\n\nfunction EthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [loginState, setLoginState] = useState(false);\n  const init = useCallback( // async artifact => {\n  //   if (artifact) {\n  //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n  //     const accounts = await web3.eth.requestAccounts();\n  //     setCurrentAccount(accounts);\n  //     const networkID = await web3.eth.net.getId();\n  //     const { abi } = artifact;\n  //     let address, contract;\n  //     try {\n  //       address = artifact.networks[networkID].address;\n  //       contract = new web3.eth.Contract(abi, address);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //     dispatch({\n  //       type: actions.init,\n  //       data: { artifact, web3, accounts, networkID, contract }\n  //     });\n  //   }\n  // }\n  async artifact => {\n    if (artifact) {\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n      const accounts = await web3.eth.requestAccounts();\n      setCurrentAccount(accounts);\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contractSS, contractC, contractBase64, contractsitnft;\n\n      try {\n        address = artifact.networks[networkID].address;\n        contractSS = new web3.eth.Contract(abi, address); // contractC = new web3.eth.Contract(colorContractABI, colorContractAddress);\n\n        contractBase64 = new web3.eth.Contract(base64ContractABI, base64ContractAddress);\n        contractsitnft = new web3.eth.Contract(sitnftContractABI, sitnftContractAddress);\n      } catch (err) {\n        console.error(err);\n      } // DISPATCH\n\n\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contractSS,\n          contractC,\n          contractBase64,\n          contractsitnft\n        }\n      });\n    }\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const accountConnected = state.accounts;\n\n      if (accountConnected) {\n        setLoginState(true);\n      } else {// console.log(\"No accounts found.\");\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifactSS = require(\"../../contracts/SimpleStorage.json\");\n\n        init(artifactSS);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  const testFunct = async () => {\n    // const result = await state.contractsitnft.methods.balanceOf(state.accounts);\n    const result = await state.contractsitnft.methods.isAdmin(state.accounts); // const result = await state.contractsitnft.methods.totalSupply();\n\n    console.log(result); // console.log(result);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const events = [\"chainChanged\", \"accountsChanged\"];\n\n    const handleChange = () => {\n      // init(state.artifact);\n      window.location.reload();\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      init,\n      currentAccount,\n      loginState,\n      testFunct\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthProvider, \"u+KcVOwzOPO1VIkKyqJ5qIyppzA=\");\n\n_c = EthProvider;\nexport default EthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","ethers","base64ContractAddress","base64ContractABI","sitnftContractAddress","sitnftContractABI","simpleContractAddress","simpleContractABI","getSITNFTContract","sitnftContract","Contract","signer","console","log","provider","EthProvider","children","state","dispatch","currentAccount","setCurrentAccount","loginState","setLoginState","init","artifact","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","abi","address","contractSS","contractC","contractBase64","contractsitnft","networks","err","error","type","data","checkIfWalletIsConnected","accountConnected","Error","tryInit","artifactSS","require","testFunct","result","methods","isAdmin","events","handleChange","window","location","reload","forEach","e","ethereum","on","removeListener"],"sources":["C:/Users/jaspz/Documents/GitHub/ITP/Blockchain-Trusted-Model/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport EthContext from \"./EthContext\";\r\nimport { reducer, actions, initialState } from \"./state\";\r\nimport { ethers } from 'ethers';\r\n\r\nimport {\r\n  base64ContractAddress,\r\n  base64ContractABI,\r\n  sitnftContractAddress,\r\n  sitnftContractABI,\r\n  simpleContractAddress,\r\n  simpleContractABI\r\n} from '../../utils/constants';\r\n\r\n/** Get SITNFT Contract Instance*/\r\nconst getSITNFTContract = () => {\r\n  const sitnftContract = new ethers.Contract(sitnftContractAddress, sitnftContractABI, signer);\r\n\r\n  console.log(provider, signer, sitnftContract);\r\n  return sitnftContract;\r\n}\r\n\r\n\r\nfunction EthProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [currentAccount, setCurrentAccount] = useState('');\r\n  const [loginState, setLoginState] = useState(false);\r\n\r\n  const init = useCallback(\r\n    // async artifact => {\r\n    //   if (artifact) {\r\n    //     const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n    //     const accounts = await web3.eth.requestAccounts();\r\n    //     setCurrentAccount(accounts);\r\n    //     const networkID = await web3.eth.net.getId();\r\n\r\n\r\n    //     const { abi } = artifact;\r\n    //     let address, contract;\r\n    //     try {\r\n    //       address = artifact.networks[networkID].address;\r\n    //       contract = new web3.eth.Contract(abi, address);\r\n    //     } catch (err) {\r\n    //       console.error(err);\r\n    //     }\r\n    //     dispatch({\r\n    //       type: actions.init,\r\n    //       data: { artifact, web3, accounts, networkID, contract }\r\n    //     });\r\n    //   }\r\n    // }\r\n    async artifact => {\r\n      if (artifact) {\r\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n        const accounts = await web3.eth.requestAccounts();\r\n        setCurrentAccount(accounts);\r\n        const networkID = await web3.eth.net.getId();\r\n\r\n        const { abi } = artifact;\r\n        let address, contractSS, contractC, contractBase64, contractsitnft;\r\n        try {\r\n          address = artifact.networks[networkID].address;\r\n          contractSS = new web3.eth.Contract(abi, address);\r\n          // contractC = new web3.eth.Contract(colorContractABI, colorContractAddress);\r\n          contractBase64 = new web3.eth.Contract(base64ContractABI, base64ContractAddress);\r\n          contractsitnft = new web3.eth.Contract(sitnftContractABI, sitnftContractAddress);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n\r\n        // DISPATCH\r\n        dispatch({\r\n          type: actions.init,\r\n          data: { artifact, web3, accounts, networkID, contractSS, contractC, contractBase64, contractsitnft }\r\n        });\r\n      }\r\n    }\r\n    , []);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const accountConnected = state.accounts;\r\n      if (accountConnected) {\r\n        setLoginState(true);\r\n      } else {\r\n        // console.log(\"No accounts found.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(\"No ethereum object\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const tryInit = async () => {\r\n      try {\r\n        const artifactSS = require(\"../../contracts/SimpleStorage.json\");\r\n        init(artifactSS);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    tryInit();\r\n  }, [init]);\r\n\r\n  const testFunct = async () => {\r\n    // const result = await state.contractsitnft.methods.balanceOf(state.accounts);\r\n    const result = await state.contractsitnft.methods.isAdmin(state.accounts);\r\n    // const result = await state.contractsitnft.methods.totalSupply();\r\n    console.log(result);\r\n    // console.log(result);\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    const events = [\"chainChanged\", \"accountsChanged\"];\r\n    const handleChange = () => {\r\n      // init(state.artifact);\r\n      window.location.reload();\r\n    };\r\n\r\n    events.forEach(e => window.ethereum.on(e, handleChange));\r\n    return () => {\r\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\r\n    };\r\n  },\r\n    [init, state.artifact]);\r\n\r\n  return (\r\n    <EthContext.Provider value={{\r\n      state,\r\n      dispatch,\r\n      init,\r\n      currentAccount,\r\n      loginState,\r\n      testFunct\r\n    }}>\r\n      {children}\r\n    </EthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default EthProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}